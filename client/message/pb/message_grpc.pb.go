// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingService_UnaryRPC_FullMethodName               = "/StreamingService/UnaryRPC"
	StreamingService_ClientStreamRPC_FullMethodName        = "/StreamingService/ClientStreamRPC"
	StreamingService_ServerStreamRPC_FullMethodName        = "/StreamingService/ServerStreamRPC"
	StreamingService_BidirectionalStreamRPC_FullMethodName = "/StreamingService/BidirectionalStreamRPC"
)

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServiceClient interface {
	// Unary RPC
	UnaryRPC(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	// Client Streaming RPC
	ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ClientStreamRPCClient, error)
	// Server Streaming RPC
	ServerStreamRPC(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (StreamingService_ServerStreamRPCClient, error)
	// Bidirectional Streaming RPC
	BidirectionalStreamRPC(ctx context.Context, opts ...grpc.CallOption) (StreamingService_BidirectionalStreamRPCClient, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) UnaryRPC(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, StreamingService_UnaryRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ClientStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[0], StreamingService_ClientStreamRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceClientStreamRPCClient{stream}
	return x, nil
}

type StreamingService_ClientStreamRPCClient interface {
	Send(*ClientStreamRequest) error
	CloseAndRecv() (*ClientStreamResponse, error)
	grpc.ClientStream
}

type streamingServiceClientStreamRPCClient struct {
	grpc.ClientStream
}

func (x *streamingServiceClientStreamRPCClient) Send(m *ClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceClientStreamRPCClient) CloseAndRecv() (*ClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) ServerStreamRPC(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (StreamingService_ServerStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[1], StreamingService_ServerStreamRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceServerStreamRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingService_ServerStreamRPCClient interface {
	Recv() (*ServerStreamResponse, error)
	grpc.ClientStream
}

type streamingServiceServerStreamRPCClient struct {
	grpc.ClientStream
}

func (x *streamingServiceServerStreamRPCClient) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) BidirectionalStreamRPC(ctx context.Context, opts ...grpc.CallOption) (StreamingService_BidirectionalStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[2], StreamingService_BidirectionalStreamRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceBidirectionalStreamRPCClient{stream}
	return x, nil
}

type StreamingService_BidirectionalStreamRPCClient interface {
	Send(*BidirectionalStreamRequest) error
	Recv() (*BidirectionalStreamResponse, error)
	grpc.ClientStream
}

type streamingServiceBidirectionalStreamRPCClient struct {
	grpc.ClientStream
}

func (x *streamingServiceBidirectionalStreamRPCClient) Send(m *BidirectionalStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceBidirectionalStreamRPCClient) Recv() (*BidirectionalStreamResponse, error) {
	m := new(BidirectionalStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServiceServer is the server API for StreamingService service.
// All implementations must embed UnimplementedStreamingServiceServer
// for forward compatibility
type StreamingServiceServer interface {
	// Unary RPC
	UnaryRPC(context.Context, *UnaryRequest) (*UnaryResponse, error)
	// Client Streaming RPC
	ClientStreamRPC(StreamingService_ClientStreamRPCServer) error
	// Server Streaming RPC
	ServerStreamRPC(*ServerStreamRequest, StreamingService_ServerStreamRPCServer) error
	// Bidirectional Streaming RPC
	BidirectionalStreamRPC(StreamingService_BidirectionalStreamRPCServer) error
	mustEmbedUnimplementedStreamingServiceServer()
}

// UnimplementedStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (UnimplementedStreamingServiceServer) UnaryRPC(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRPC not implemented")
}
func (UnimplementedStreamingServiceServer) ClientStreamRPC(StreamingService_ClientStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamRPC not implemented")
}
func (UnimplementedStreamingServiceServer) ServerStreamRPC(*ServerStreamRequest, StreamingService_ServerStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamRPC not implemented")
}
func (UnimplementedStreamingServiceServer) BidirectionalStreamRPC(StreamingService_BidirectionalStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamRPC not implemented")
}
func (UnimplementedStreamingServiceServer) mustEmbedUnimplementedStreamingServiceServer() {}

// UnsafeStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServiceServer will
// result in compilation errors.
type UnsafeStreamingServiceServer interface {
	mustEmbedUnimplementedStreamingServiceServer()
}

func RegisterStreamingServiceServer(s grpc.ServiceRegistrar, srv StreamingServiceServer) {
	s.RegisterService(&StreamingService_ServiceDesc, srv)
}

func _StreamingService_UnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).UnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingService_UnaryRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).UnaryRPC(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_ClientStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).ClientStreamRPC(&streamingServiceClientStreamRPCServer{stream})
}

type StreamingService_ClientStreamRPCServer interface {
	SendAndClose(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
	grpc.ServerStream
}

type streamingServiceClientStreamRPCServer struct {
	grpc.ServerStream
}

func (x *streamingServiceClientStreamRPCServer) SendAndClose(m *ClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceClientStreamRPCServer) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingService_ServerStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServiceServer).ServerStreamRPC(m, &streamingServiceServerStreamRPCServer{stream})
}

type StreamingService_ServerStreamRPCServer interface {
	Send(*ServerStreamResponse) error
	grpc.ServerStream
}

type streamingServiceServerStreamRPCServer struct {
	grpc.ServerStream
}

func (x *streamingServiceServerStreamRPCServer) Send(m *ServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingService_BidirectionalStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).BidirectionalStreamRPC(&streamingServiceBidirectionalStreamRPCServer{stream})
}

type StreamingService_BidirectionalStreamRPCServer interface {
	Send(*BidirectionalStreamResponse) error
	Recv() (*BidirectionalStreamRequest, error)
	grpc.ServerStream
}

type streamingServiceBidirectionalStreamRPCServer struct {
	grpc.ServerStream
}

func (x *streamingServiceBidirectionalStreamRPCServer) Send(m *BidirectionalStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceBidirectionalStreamRPCServer) Recv() (*BidirectionalStreamRequest, error) {
	m := new(BidirectionalStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingService_ServiceDesc is the grpc.ServiceDesc for StreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRPC",
			Handler:    _StreamingService_UnaryRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamRPC",
			Handler:       _StreamingService_ClientStreamRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamRPC",
			Handler:       _StreamingService_ServerStreamRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamRPC",
			Handler:       _StreamingService_BidirectionalStreamRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
